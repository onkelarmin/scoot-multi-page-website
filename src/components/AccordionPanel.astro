---
// Library imports
import { Icon } from "astro-icon/components"

type Props = {
  id: string
  title: string
  body: string
}

const { id, title, body } = Astro.props
---

<li class="panel">
  <div class="panel__header">
    <h4 id=`panel-${id}-title` class="heading-4">{title}</h4>
    <button
      class="panel__trigger"
      aria-controls=`panel-${id}-content`
      aria-expanded="false"
    >
      <Icon name="chevron" width={16} height={8} />
    </button>
  </div>
  <div
    id=`panel-${id}-content`
    class="panel__content"
    role="region"
    aria-labelledby=`panel-${id}-title`
    aria-hidden="true"
  >
    <div>
      <p>
        {body}
      </p>
    </div>
  </div>
</li>

<!-- Styles -->
<style lang="scss">
  @use "../sass/abstracts" as *;

  .panel {
    background-color: $color-neutral-200;
    transition: background-color 250ms ease-in-out;

    &:is(:hover, :focus-within) {
      background-color: $color-brand-200;
    }

    &__header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      gap: 1rem;
      cursor: pointer;
      padding: 2rem;

      @include mq(medium) {
        padding-inline-start: 2.5rem;
      }

      @include mq(large) {
        padding-inline-end: 2.5rem;
      }
    }

    &__trigger {
      flex-shrink: 0;
      display: grid;
      place-items: center;
      background-color: transparent;
      border: none;
      transition: transform 250ms ease-out;

      &[aria-expanded="true"] {
        transform: rotate(180deg);
      }
    }

    &__content {
      display: grid;
      grid-template-rows: 0fr;
      transition: grid-template-rows 300ms ease-out;

      > div {
        overflow: hidden;
      }

      p {
        opacity: 0;
        padding: 0 2rem 2rem;
        transition: opacity 200ms ease;

        @include mq(medium) {
          padding-inline-start: 2.5rem;
        }

        @include mq(large) {
          padding-inline-end: 2.5rem;
        }
      }

      &[aria-hidden="false"] {
        grid-template-rows: 1fr;

        p {
          opacity: 1;
          transition: opacity 300ms ease 100ms;
        }
      }
    }
  }
</style>

<!-- Javascript -->
<script>
  // Page load
  window.addEventListener("DOMContentLoaded", () => {
    handleAccordion()
  })

  // View Transition
  document.addEventListener("astro:after-swap", () => {
    handleAccordion()
  })

  function handleAccordion() {
    const allPanelHeaders = [
      ...document.querySelectorAll(".panel__header"),
    ] as HTMLElement[]
    const allPanelContents = [
      ...document.querySelectorAll(".panel__content"),
    ] as HTMLDivElement[]
    const allPanelButtons = [
      ...document.querySelectorAll(".panel__trigger"),
    ] as HTMLButtonElement[]

    allPanelHeaders.forEach((panel) =>
      panel.addEventListener("click", handlePanelClick)
    )

    function handlePanelClick(e: MouseEvent) {
      if (!e.target) return

      const clickedElement = e.target as HTMLElement
      const clickedPanel = clickedElement.closest("li")!
      const clickedPanelContent = clickedPanel.querySelector(
        ".panel__content"
      ) as HTMLDivElement
      const clickedPanelButton = clickedPanel.querySelector(
        ".panel__trigger"
      ) as HTMLButtonElement

      const isExpanded =
        clickedPanelButton.getAttribute("aria-expanded") === "true"
          ? true
          : false

      if (isExpanded) {
        collapseAllPanels()
      } else {
        collapseAllPanels()
        clickedPanelContent.setAttribute("aria-hidden", "false")
        clickedPanelButton.setAttribute("aria-expanded", "true")
      }
    }

    function collapseAllPanels() {
      allPanelContents.forEach((content) =>
        content.setAttribute("aria-hidden", "true")
      )
      allPanelButtons.forEach((button) =>
        button.setAttribute("aria-expanded", "false")
      )
    }
  }
</script>
