---
// Library imports
import { getImage } from "astro:assets"

// Type imports
import type { ImageMetadata, GetImageResult } from "astro"

type Props = {
  imageDesktop?: ImageMetadata
  imageTablet?: ImageMetadata
  imageMobile: ImageMetadata
  format?: string
  quality?: string
  altText: string
  breakpointDesktop?: string
  breakpointTablet?: string
}

const {
  imageDesktop,
  imageTablet,
  imageMobile,
  format = "webp",
  quality,
  altText,
  breakpointDesktop = "60em",
  breakpointTablet = "45em",
} = Astro.props

// Optimizing images
const imageDesktopOpt = await getOptimizedImg(imageDesktop)
const imageTabletOpt = await getOptimizedImg(imageTablet)
const imageMobileOpt = (await getOptimizedImg(imageMobile)) as GetImageResult

async function getOptimizedImg(img: ImageMetadata | undefined) {
  if (img) {
    return await getImage({
      src: img,
      format,
      quality,
    })
  } else return undefined
}

// Creating string fragments
const strDesktop = getFragmentString(imageDesktopOpt, breakpointDesktop)
const strTablet = getFragmentString(imageTabletOpt, breakpointTablet)
const strMobile = getFragmentString(imageMobileOpt, undefined)

function getFragmentString(
  optimzedImg: GetImageResult | undefined,
  breakpoint: string | undefined
) {
  if (!optimzedImg) return ""

  if (breakpoint) {
    return `<source
    media="(min-width: ${breakpoint})"
    srcset=${optimzedImg.src}
  />`
  } else {
    return `<source srcset=${optimzedImg.src}>`
  }
}
---

<picture>
  <Fragment set:html={strDesktop} />
  <Fragment set:html={strTablet} />
  <Fragment set:html={strMobile} />
  <img
    src={imageDesktopOpt
      ? imageDesktopOpt.src
      : imageTabletOpt
        ? imageTabletOpt.src
        : imageMobileOpt.src}
    alt={altText}
  />
</picture>

<style lang="scss">
  img {
    height: 100%;
    width: 100%;
    object-fit: cover;
  }
</style>
